package org.example.events

import org.scalatest.funsuite.AnyFunSuite

import java.time.LocalDateTime
import scala.collection.mutable

class DocOpenTest extends AnyFunSuite {

  test("parse valid doc open") {
    val lines = mutable
      .ArrayBuffer("DOC_OPEN 08.11.2020_12:31:55 187920943 LAW_178945")
      .iterator
      .buffered
    val docOpen = DocOpen.parse(lines)

    assert(docOpen.isInstanceOf[DocOpen])
    assert(docOpen.date.isInstanceOf[Option[LocalDateTime]])
    assert(s"${docOpen.date.get.toLocalDate}" == "2020-11-08")
    assert(s"${docOpen.date.get.toLocalTime}" == "12:31:55")
    assert(docOpen.id.isInstanceOf[Option[Int]])
    assert(docOpen.id.contains(187920943))
    assert(docOpen.docId.isInstanceOf[Option[String]])
    assert(docOpen.docId.contains("LAW_178945"))
  }

  test("handle empty date") {
    val lines = mutable
      .ArrayBuffer("DOC_OPEN 187920943 LAW_178945")
      .iterator
      .buffered
    val docOpen = DocOpen.parse(lines)

    assert(docOpen.isInstanceOf[DocOpen])
    assert(docOpen.date.isEmpty)
    assert(docOpen.id.isInstanceOf[Option[Int]])
    assert(docOpen.id.contains(187920943))
    assert(docOpen.docId.isInstanceOf[Option[String]])
    assert(docOpen.docId.contains("LAW_178945"))
  }

  test("handle invalid date") {
    val lines = mutable
      .ArrayBuffer("DOC_OPEN INVALID_DATE 187920943 LAW_178945")
      .iterator
      .buffered
    val docOpen = DocOpen.parse(lines)

    assert(docOpen.isInstanceOf[DocOpen])
    assert(docOpen.date.isEmpty)
    assert(docOpen.id.isInstanceOf[Option[Int]])
    assert(docOpen.id.contains(187920943))
    assert(docOpen.docId.isInstanceOf[Option[String]])
    assert(docOpen.docId.contains("LAW_178945"))
  }

  test("handle date secondary format") {
    val lines = mutable
      .ArrayBuffer(
        "DOC_OPEN Sun,_08_Nov_2020_12:31:55_+0300 187920943 LAW_178945"
      )
      .iterator
      .buffered
    val docOpen = DocOpen.parse(lines)

    assert(docOpen.isInstanceOf[DocOpen])
    assert(docOpen.date.isInstanceOf[Option[LocalDateTime]])
    assert(s"${docOpen.date.get.toLocalDate}" == "2020-11-08")
    assert(s"${docOpen.date.get.toLocalTime}" == "12:31:55")
    assert(docOpen.id.isInstanceOf[Option[Int]])
    assert(docOpen.id.contains(187920943))
    assert(docOpen.docId.isInstanceOf[Option[String]])
    assert(docOpen.docId.contains("LAW_178945"))
  }

  test("handle empty ID") {
    val lines = mutable
      .ArrayBuffer("DOC_OPEN 08.11.2020_12:31:55 LAW_178945")
      .iterator
      .buffered
    val docOpen = DocOpen.parse(lines)

    assert(docOpen.isInstanceOf[DocOpen])
    assert(docOpen.date.isInstanceOf[Option[LocalDateTime]])
    assert(s"${docOpen.date.get.toLocalDate}" == "2020-11-08")
    assert(s"${docOpen.date.get.toLocalTime}" == "12:31:55")
    assert(docOpen.id.isEmpty)
    assert(docOpen.docId.isInstanceOf[Option[String]])
    assert(docOpen.docId.contains("LAW_178945"))
  }

  test("handle negative ID") {
    val lines = mutable
      .ArrayBuffer("DOC_OPEN 08.11.2020_12:31:55 -187920943 LAW_178945")
      .iterator
      .buffered
    val docOpen = DocOpen.parse(lines)

    assert(docOpen.isInstanceOf[DocOpen])
    assert(docOpen.date.isInstanceOf[Option[LocalDateTime]])
    assert(s"${docOpen.date.get.toLocalDate}" == "2020-11-08")
    assert(s"${docOpen.date.get.toLocalTime}" == "12:31:55")
    assert(docOpen.id.isInstanceOf[Option[Int]])
    assert(docOpen.id.contains(187920943))
    assert(docOpen.docId.isInstanceOf[Option[String]])
    assert(docOpen.docId.contains("LAW_178945"))
  }

  test("handle empty document ID") {
    val lines = mutable
      .ArrayBuffer("DOC_OPEN 08.11.2020_12:31:55 187920943 ")
      .iterator
      .buffered
    val docOpen = DocOpen.parse(lines)

    assert(docOpen.isInstanceOf[DocOpen])
    assert(docOpen.date.isInstanceOf[Option[LocalDateTime]])
    assert(s"${docOpen.date.get.toLocalDate}" == "2020-11-08")
    assert(s"${docOpen.date.get.toLocalTime}" == "12:31:55")
    assert(docOpen.id.isInstanceOf[Option[Int]])
    assert(docOpen.id.contains(187920943))
    assert(docOpen.docId.isEmpty)
  }
}
