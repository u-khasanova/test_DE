package org.example.processor.events

import org.example.processor.SessionBuilder
import org.example.processor.utils.ParseContext
import org.scalatest.funsuite.AnyFunSuite

import scala.collection.mutable

class DocOpenTest extends AnyFunSuite {

  test("parse valid doc open") {
    val filePath = "testFilePath"
    val rawSession = mutable
      .ArrayBuffer(
        "DOC_OPEN 15.04.2020_02:49:51 234044353 LAW_367400",
        "SESSION_END 15.04.2020_02:53:55"
      )
      .iterator
      .buffered

    val currentSession = SessionBuilder(filePath)
    val context = ParseContext(filePath, rawSession, currentSession)
    DocOpen.parse(context)

    assert(context.currentSession.docOpens.head.date.get.toString == "2020-04-15T02:49:51")
    assert(context.currentSession.docOpens.head.searchId.contains(234044353))
    assert(context.currentSession.docOpens.head.docId.contains("LAW_367400"))
  }

  test("handle empty date") {
    val filePath = "testFilePath"
    val rawSession = mutable
      .ArrayBuffer(
        "DOC_OPEN 15.04.2020_02:49:51 234044353 LAW_367400",
        "SESSION_END 15.04.2020_02:53:55"
      )
      .iterator
      .buffered

    val currentSession = SessionBuilder(filePath)
    val context = ParseContext(filePath, rawSession, currentSession)
    DocOpen.parse(context)

    assert(context.currentSession.docOpens.head.date.get.toString == "2020-04-15T02:49:51")
    assert(context.currentSession.docOpens.head.searchId.contains(234044353))
    assert(context.currentSession.docOpens.head.docId.contains("LAW_367400"))
  }

  test("handle empty search ID") {
    val filePath = "testFilePath"
    val rawSession = mutable
      .ArrayBuffer(
        "DOC_OPEN 15.04.2020_02:49:51  LAW_367400",
        "SESSION_END 15.04.2020_02:53:55"
      )
      .iterator
      .buffered

    val currentSession = SessionBuilder(filePath)
    val context = ParseContext(filePath, rawSession, currentSession)
    DocOpen.parse(context)

    assert(context.currentSession.docOpens.head.date.get.toString == "2020-04-15T02:49:51")
    assert(context.currentSession.docOpens.head.searchId.isEmpty)
    assert(context.currentSession.docOpens.head.docId.contains("LAW_367400"))
  }

  test("handle negative search ID") {
    val filePath = "testFilePath"
    val rawSession = mutable
      .ArrayBuffer(
        "DOC_OPEN 15.04.2020_02:49:51 -234044353 LAW_367400",
        "SESSION_END 15.04.2020_02:53:55"
      )
      .iterator
      .buffered

    val currentSession = SessionBuilder(filePath)
    val context = ParseContext(filePath, rawSession, currentSession)
    DocOpen.parse(context)

    assert(context.currentSession.docOpens.head.date.get.toString == "2020-04-15T02:49:51")
    assert(context.currentSession.docOpens.head.searchId.contains(234044353))
    assert(context.currentSession.docOpens.head.docId.contains("LAW_367400"))
  }

  test("handle empty document ID") {
    val filePath = "testFilePath"
    val rawSession = mutable
      .ArrayBuffer(
        "DOC_OPEN 15.04.2020_02:49:51 234044353 ",
        "SESSION_END 15.04.2020_02:53:55"
      )
      .iterator
      .buffered

    val currentSession = SessionBuilder(filePath)
    val context = ParseContext(filePath, rawSession, currentSession)
    DocOpen.parse(context)

    assert(context.currentSession.docOpens.head.date.get.toString == "2020-04-15T02:49:51")
    assert(context.currentSession.docOpens.head.searchId.contains(234044353))
    assert(context.currentSession.docOpens.head.docId.isEmpty)
  }
}
